name: Build & Deploy React (Vite) to Hostinger via FTPS

on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 20 LTS
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install deps (npm ci)
        run: npm ci

      - name: Create .env.production from example + secrets
        run: |
          if [ -f .env.example ]; then cp .env.example .env.production; fi
          # Añade aquí sustituciones VITE_* si las usas (opcional)
          # if [ -n "${{ secrets.VITE_API_URL }}" ]; then
          #   grep -q '^VITE_API_URL=' .env.production \
          #     && sed -i 's|^VITE_API_URL=.*$|VITE_API_URL=${{ secrets.VITE_API_URL }}|' .env.production \
          #     || echo "VITE_API_URL=${{ secrets.VITE_API_URL }}" >> .env.production
          # fi

      - name: Build (Vite)
        run: npm run build

      - name: Copy .htaccess into dist
        run: |
          mkdir -p dist
          cp public/.htaccess dist/.htaccess

      - name: Inspect dist contents
        run: |
          echo "Listing dist/"
          ls -la dist || true
          echo "----"
          find dist -maxdepth 2 -type f | sed 's/^/dist: /' || true

      - name: Debug secrets & connectivity (no apt-get)
        env:
          FTP_HOST: ${{ secrets.FTP_HOST }}
          FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
          FTP_SERVER_DIR: ${{ secrets.FTP_SERVER_DIR }}
        run: |
          set -e

          echo "== Comprobando que las secrets existen (sin mostrar valores) =="
          [ -n "${FTP_HOST}" ] && echo "FTP_HOST: OK" || (echo "FALTA FTP_HOST" && exit 1)
          [ -n "${FTP_USERNAME}" ] && echo "FTP_USERNAME: OK" || (echo "FALTA FTP_USERNAME" && exit 1)
          [ -n "${FTP_PASSWORD}" ] && echo "FTP_PASSWORD: OK" || (echo "FALTA FTP_PASSWORD" && exit 1)
          [ -n "${FTP_SERVER_DIR}" ] && echo "FTP_SERVER_DIR: OK" || (echo "FALTA FTP_SERVER_DIR" && exit 1)

          echo
          echo "== Comprobando formato del host =="
          if echo "$FTP_HOST" | grep -Eq '^[0-9]{1,3}(\.[0-9]{1,3}){3}$'; then
            echo "FTP_HOST parece ser una IP (correcto)."
          else
            echo "FTP_HOST parece ser un hostname (correcto si resuelve por DNS)."
          fi

          echo
          echo "== Resolviendo DNS con Node.js =="
          node -e "const dns=require('dns');dns.lookup(process.env.FTP_HOST,(e,a,f)=>{if(e){console.error('DNS lookup error:',e.code||e.message);process.exit(1)}else{console.log('DNS OK:',a,'family',f)}})"

          echo
          echo '== Probando conexión TCP al puerto 21 (FTP) =='
          # /dev/tcp funciona en bash; si no conecta, saldrá con error tras timeout corto
          (exec 3<>/dev/tcp/${FTP_HOST}/21 && echo "Conexión TCP a 21: OK" && exec 3>&- 3<&-) || (echo "No se pudo abrir conexión TCP al puerto 21" && exit 1)

          echo
          echo "== Mostrando ruta de destino configurada (no valor, solo confirmación) =="
          echo "server-dir configurado: OK"


      - name: Deploy via FTP (diagnóstico)
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: ${{ secrets.FTP_HOST }}          # 213.130.145.92 (sin ftp://)
          username: ${{ secrets.FTP_USERNAME }}    # u385896031
          password: ${{ secrets.FTP_PASSWORD }}
          protocol: ftp
          port: 21
          local-dir: dist/
          server-dir: ${{ secrets.FTP_SERVER_DIR }}  # veremos variantes abajo
          log-level: verbose
          timeout: 180000

